/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState, useEffect } from 'react';
import { Html, useGLTF } from '@react-three/drei';
import { useFrame, useThree, useLoader } from '@react-three/fiber';
import * as THREE from 'three';
import IMG_SRC from '../../public/screenshot.jpeg';
import { useSpring, animated } from '@react-spring/three';

export default function Model(props) {
  const group = useRef();
  const { gl } = useThree();
  const { nodes, materials } = useGLTF(
    'https://vazxmixjsiawhamofees.supabase.co/storage/v1/object/public/models/iphone-x/model.gltf'
  );

  const [rotation, setRotation] = useState({
    x: 0,
    y: 0
  });

  useEffect(() => {
    gl.domElement.addEventListener('mousemove', onMouseMove);
    return () => {
      gl.domElement.removeEventListener('mousemove', onMouseMove);
    };
  }, []);

  useFrame(() => {
    // Gradually move towards the target rotation angles
    const lerpFactor = 0.04;
    group.current.rotation.x = THREE.MathUtils.lerp(
      group.current.rotation.x,
      rotation.x,
      lerpFactor
    );
    group.current.rotation.y = THREE.MathUtils.lerp(
      group.current.rotation.y,
      rotation.y,
      lerpFactor
    );
  });

  const onMouseMove = (event) => {
    const { clientX, clientY } = event;
    const { left, bottom, width, height } = event.target.getBoundingClientRect();

    const x = ((clientX - left) / width) * 2 - 1;
    const y = ((clientY - bottom) / height) * 2 - 1;

    const maxRotationY = Math.PI / 8;
    const maxRotationX = Math.PI / 12;

    setRotation({
      x: THREE.MathUtils.clamp(y * 1.5, -maxRotationX, maxRotationX),
      y: THREE.MathUtils.clamp(x * 1.2, -maxRotationY, maxRotationY)
    });
  };

  return (
    <group ref={group} {...props} dispose={null} onMouseMove={onMouseMove}>
      <group position={[0, 0.56, 0]}>
        <mesh geometry={nodes.Circle038.geometry} material={nodes.Circle038.material} />
        <mesh geometry={nodes.Circle038_1.geometry} material={materials['Front.001']} />
        <mesh geometry={nodes.Circle038_2.geometry} material={nodes.Circle038_2.material} />
        <mesh geometry={nodes.Circle038_3.geometry} material={materials['BackGrey.001']} />
        <mesh geometry={nodes.Circle038_4.geometry} material={materials['Rubber.001']} />
        <mesh
          geometry={nodes.AntennaLineBottom001.geometry}
          material={nodes.AntennaLineBottom001.material}
          position={[0, -2.68, 0]}
        />
        <mesh
          geometry={nodes.AntennaLineTop001.geometry}
          material={nodes.AntennaLineTop001.material}
          position={[0, 0.02, 0]}
        />
        <mesh
          geometry={nodes.BackCameraBottomLens001.geometry}
          material={nodes.BackCameraBottomLens001.material}
          position={[0.7, 0.88, -0.08]}
        />
        <mesh
          geometry={nodes.AppleLogo001.geometry}
          material={materials['AppleLogo.001']}
          position={[0.17, 0.52, -0.08]}
        />
        <mesh
          geometry={nodes.BackCameraBottomGreyRing001.geometry}
          material={nodes.BackCameraBottomGreyRing001.material}
          position={[0.7, 0.88, -0.09]}
        />
        <mesh
          geometry={nodes.BackCameraP1001.geometry}
          material={materials['Black.015']}
          position={[0.7, 1.03, -0.09]}
        />
        <mesh
          geometry={nodes.BackCameraTopLens001.geometry}
          material={nodes.BackCameraTopLens001.material}
          position={[0.7, 1.18, -0.08]}
        />
        <mesh
          geometry={nodes.FrontSpeakerBG001.geometry}
          material={materials['FrontSpeaker.001']}
          position={[0.16, 1.32, 0.08]}
        />
        <mesh
          geometry={nodes.CameraBump001.geometry}
          material={nodes.CameraBump001.material}
          position={[0.7, 1.04, -0.08]}
        />
        <mesh
          geometry={nodes.FrontCameraContainer001.geometry}
          material={materials['FrontCameraBlack.002']}
          position={[0.34, 1.32, 0.08]}
        />
        <mesh
          geometry={nodes.BackCameraTopGreyRing001.geometry}
          material={nodes.BackCameraTopGreyRing001.material}
          position={[0.7, 1.18, -0.09]}
        />
        <mesh
          geometry={nodes.MuteSwitch001.geometry}
          material={nodes.MuteSwitch001.material}
          position={[-0.65, 0.92, 0.01]}
        />
        <mesh
          geometry={nodes.iPhoneLogo001.geometry}
          material={materials['iPhoneLogo.001']}
          position={[0.2, -1.18, -0.08]}
        />
        <group position={[0.97, 0.56, 0]}>
          <mesh geometry={nodes.Circle032.geometry} material={nodes.Circle032.material} />
          <mesh geometry={nodes.Circle032_1.geometry} material={nodes.Circle032_1.material} />
        </group>
        <group position={[0.98, -0.04, 0]}>
          <mesh geometry={nodes.Circle031.geometry} material={materials['Black.014']} />
          <mesh geometry={nodes.Circle031_1.geometry} material={nodes.Circle031_1.material} />
        </group>
        <mesh
          geometry={nodes.VolumeButtons001.geometry}
          material={nodes.VolumeButtons001.material}
          position={[-0.66, 0.21, 0]}
        />
        <mesh>
          <Html
            onClick={() => console.log('click')}
            transform
            wrapperClass="htmlScreen"
            position={[0.165, -0.235, 0.11]}>
            <img
              onClick={() => console.log('clicked img')}
              src="../../public/screenshot.jpeg"
              alt="Alt text"
            />
          </Html>
        </mesh>
        {props.children}
      </group>
    </group>
  );
}

useGLTF.preload(
  'https://vazxmixjsiawhamofees.supabase.co/storage/v1/object/public/models/iphone-x/model.gltf'
);
